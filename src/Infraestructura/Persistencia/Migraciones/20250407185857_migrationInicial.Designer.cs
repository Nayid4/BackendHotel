// <auto-generated />
using System;
using Infraestructura.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructura.Persistencia.Migraciones
{
    [DbContext(typeof(AplicacionContextoDb))]
    [Migration("20250407185857_migrationInicial")]
    partial class migrationInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Contactos.Contacto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Contacto");
                });

            modelBuilder.Entity("Dominio.FormasDePagos.FormaDePago", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroTarjeta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Titular")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FormaDePago");
                });

            modelBuilder.Entity("Dominio.Habitaciones.Habitacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroDeHabitacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("PrecioPorNoche")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Habitacion");
                });

            modelBuilder.Entity("Dominio.Imagenes.Imagen", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("Dominio.ImagenesDeHabitaciones.ImagenDeHabitacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HabitacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHabitacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdImagen")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HabitacionId");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("IdImagen");

                    b.ToTable("ImagenDeHabitacion");
                });

            modelBuilder.Entity("Dominio.ImagenesDeResenas.ImagenDeResena", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdImagen")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResena")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResenaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdImagen");

                    b.HasIndex("IdResena");

                    b.HasIndex("ResenaId");

                    b.ToTable("ImagenDeResena");
                });

            modelBuilder.Entity("Dominio.Resenas.Resena", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calificacion")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HabitacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHabitacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HabitacionId");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Resena");
                });

            modelBuilder.Entity("Dominio.Reservas.Reserva", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadAdultos")
                        .HasColumnType("int");

                    b.Property<int>("CantidadNinos")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdContacto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdFormaDePago")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHabitacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdContacto");

                    b.HasIndex("IdFormaDePago");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Dominio.Servicios.Servicio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("Dominio.ServiciosDeHabitacion.ServicioDeHabitacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HabitacionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHabitacion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdServicio")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HabitacionId");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("IdServicio");

                    b.ToTable("ServicioDeHabitacion");
                });

            modelBuilder.Entity("Dominio.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaDeActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NombreDeUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Dominio.ImagenesDeHabitaciones.ImagenDeHabitacion", b =>
                {
                    b.HasOne("Dominio.Habitaciones.Habitacion", null)
                        .WithMany("ImagenesDeHabitacion")
                        .HasForeignKey("HabitacionId");

                    b.HasOne("Dominio.Habitaciones.Habitacion", "Habitacion")
                        .WithMany()
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Imagenes.Imagen", "Imagen")
                        .WithMany()
                        .HasForeignKey("IdImagen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habitacion");

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("Dominio.ImagenesDeResenas.ImagenDeResena", b =>
                {
                    b.HasOne("Dominio.Imagenes.Imagen", "Imagen")
                        .WithMany()
                        .HasForeignKey("IdImagen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Resenas.Resena", null)
                        .WithMany("Imagenes")
                        .HasForeignKey("IdResena")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Resenas.Resena", "Resena")
                        .WithMany()
                        .HasForeignKey("ResenaId");

                    b.Navigation("Imagen");

                    b.Navigation("Resena");
                });

            modelBuilder.Entity("Dominio.Resenas.Resena", b =>
                {
                    b.HasOne("Dominio.Habitaciones.Habitacion", null)
                        .WithMany("Resenas")
                        .HasForeignKey("HabitacionId");

                    b.HasOne("Dominio.Habitaciones.Habitacion", "Habitacion")
                        .WithMany()
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Usuarios.Usuario", "Usuario")
                        .WithMany("Resenas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habitacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Reservas.Reserva", b =>
                {
                    b.HasOne("Dominio.Contactos.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("IdContacto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.FormasDePagos.FormaDePago", "FormaDePago")
                        .WithMany()
                        .HasForeignKey("IdFormaDePago")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Habitaciones.Habitacion", "Habitacion")
                        .WithMany()
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Usuarios.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("FormaDePago");

                    b.Navigation("Habitacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.ServiciosDeHabitacion.ServicioDeHabitacion", b =>
                {
                    b.HasOne("Dominio.Habitaciones.Habitacion", null)
                        .WithMany("ServiciosDeHabitacion")
                        .HasForeignKey("HabitacionId");

                    b.HasOne("Dominio.Habitaciones.Habitacion", "Habitacion")
                        .WithMany()
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Servicios.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habitacion");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Dominio.Habitaciones.Habitacion", b =>
                {
                    b.Navigation("ImagenesDeHabitacion");

                    b.Navigation("Resenas");

                    b.Navigation("ServiciosDeHabitacion");
                });

            modelBuilder.Entity("Dominio.Resenas.Resena", b =>
                {
                    b.Navigation("Imagenes");
                });

            modelBuilder.Entity("Dominio.Usuarios.Usuario", b =>
                {
                    b.Navigation("Resenas");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
